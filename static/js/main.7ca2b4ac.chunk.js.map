{"version":3,"sources":["components/SearchBar.js","components/Avatar.js","components/UserInfo.js","components/PaginatedUserList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_ref","onSearch","loading","inputRef","useRef","react_default","a","createElement","className","onSubmit","e","preventDefault","val","current","value","type","aria-label","autoCapitalize","autoComplete","autoCorrect","autoFocus","disabled","placeholder","ref","Avatar","url","link","altText","_useState","useState","_useState2","Object","slicedToArray","setDidLoad","_useState3","_useState4","setLoadFailed","href","target","src","alt","width","onLoad","onError","UserInfo","user","info","setInfo","_useContext","useContext","AppContext","dispatch","rateLimitExceeded","useEffect","axios","get","then","res","data","catch","response","status","headers","parseInt","countdown","Date","now","console","debug","concat","toFixed","Actions","RateLimitExceeded","payload","title","login","html_url","Fragment","name","location","viewBox","version","height","aria-hidden","fillRule","d","bio","email","PaginatedUserList","total","users","pageCount","currentPage","goToPage","map","key","id","src_components_Avatar","avatar_url","src_components_UserInfo","length","dist_default","activeClassName","activeLinkClassName","containerClassName","pageRangeDisplayed","onPageChange","SetIsLoading","SetResults","FailedUserFetch","SetPage","reducer","state","objectSpread","isLoading","error","failedToLoadMsg","items","total_count","createContext","App","_useReducer","useReducer","_useReducer2","_ref2","asyncToGenerator","regenerator_default","mark","_callee","text","_res$data","_pageCount","wrap","_context","prev","next","replace","sent","Math","ceil","t0","message","stop","_x","apply","this","arguments","Provider","src_components_SearchBar","src_components_PaginatedUserList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ca2b4ac.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport './SearchBar.css';\n\nconst SearchBar = ({ onSearch, loading }) => {\n  const inputRef = useRef(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let val = inputRef.current.value;\n    if (val) {\n      onSearch(val);\n    }\n  };\n\n  return (\n    <form\n      className=\"search-wrapper\"\n      onSubmit={onSubmit}>\n      <input\n        type=\"search\"\n        aria-label=\"Search Github Users\"\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoFocus\n        className=\"user-search\"\n        disabled={loading}\n        placeholder=\"Search Github Users\"\n        ref={inputRef} />\n      <button className=\"btn search-btn\"\n        disabled={loading}\n        type=\"submit\">\n        Search\n      </button>\n    </form>\n  )\n};\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport './Avatar.css';\n\nconst Avatar = ({ url, link, altText }) => {\n\n  const [didLoad, setDidLoad] = useState(false);\n  const [loadFailed, setLoadFailed] = useState(false);\n\n  return (\n    <a\n      className=\"avatar-wrapper\"\n      href={link}\n      target=\"_blank\">\n      <img\n        className=\"avatar\"\n        src={url}\n        alt={altText}\n        width={50}\n        onLoad={() => setDidLoad(true)}\n        onError={() => setLoadFailed(true)}\n      />\n    </a>\n  )\n};\n\nexport default Avatar;","import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './UserInfo.css';\nimport { Actions, AppContext } from '../App';\n\nconst UserInfo = ({ user }) => {\n  const [info, setInfo] = useState(null);\n  const { dispatch, rateLimitExceeded } = useContext(AppContext);\n\n  /**\n   * Get the detailed information from the API about this user\n   * Note, because this is a demo app and we aren't using any authentication,\n   * after a few page reloads, we'll start getting 403's because we exceed the rate limit.\n   * When that happens, we'll stop bothering with making those requests, and\n   * fall back to only showing avatars and usernames\n   */\n  useEffect(() => {\n    if (user && !rateLimitExceeded) {\n      axios.get(user.url)\n        .then(res => setInfo(res.data))\n        .catch(e => {\n          if (e.response.status === 403) {\n            // Let's check the headers to see if we've exceeded the rate limit\n            const { headers } = e.response;\n            const remaining = parseInt(headers['x-ratelimit-remaining']);\n            if (remaining === 0) {\n              // Yup! We exceeded the limit\n              if (headers['x-ratelimit-reset']) {\n                const resetTime = parseInt(headers['x-ratelimit-reset']) * 1000;\n                const countdown = resetTime - Date.now();\n                console.debug(\n                  `%c[RATE_LIMIT] Oops, made too many API calls. We'll have to wait another ${(countdown / 60000).toFixed(1)} minutes before trying again`,\n                  'color: magenta; font-size: 16px'\n                );\n                dispatch({ type: Actions.RateLimitExceeded, payload: true });\n              }\n            }\n          }\n        });\n    }\n  }, [user, rateLimitExceeded, dispatch]);\n\n  return (\n    <div className={`user-info ${rateLimitExceeded ? 'show-less' : ''}`}>\n      <div className=\"flex\">\n        <h4 className=\"username\" title={user.login}>\n          <a className=\"user-link\" href={user.html_url} target=\"_blank\">{user.login}</a>\n        </h4>\n        {\n          info &&\n          <>\n            <h5 className=\"user-desc\" title={info.name}>{info.name}</h5>\n          </>\n        }\n      </div>\n      {\n        info &&\n        <div className=\"flex\">\n          {\n            info.location &&\n            <div className=\"flex user-location\">\n              {/* SVG Taken from GitHub's markup */}\n              <svg className=\"octicon octicon-location\" viewBox=\"0 0 12 16\" version=\"1.1\"\n                width=\"12\" height=\"16\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\"\n                  d=\"M6 0C2.69 0 0 2.5 0 5.5 0 10.02 6 16 6 16s6-5.98 6-10.5C12 2.5 9.31\n                    0 6 0zm0 14.55C4.14 12.52 1 8.44 1 5.5 1 3.02 3.25 1 6 1c1.34 0 2.61.48\n                    3.56 1.36.92.86 1.44 1.97 1.44 3.14 0 2.94-3.14 7.02-5 9.05zM8 5.5c0\n                    1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z\"\n                ></path>\n              </svg>\n              <span>{info.location}</span>\n            </div>\n          }\n          {\n            info.bio &&\n            <div className=\"flex\">\n              <span>{info.bio}</span>\n            </div>\n          }\n          {\n            info.email &&\n            <div className=\"flex\">\n              {/* SVG Taken from GitHub's markup */}\n              <svg className=\"octicon octicon-mail\" viewBox=\"0 0 14 16\" version=\"1.1\" width=\"14\"\n                height=\"16\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\" d=\"M0 4v8c0 .55.45 1 1 1h12c.55 0\n                  1-.45 1-1V4c0-.55-.45-1-1-1H1c-.55 0-1 .45-1 1zm13 0L7 9 1 4h12zM1 5.5l4\n                  3-4 3v-6zM2 12l3.5-3L7 10.5 8.5 9l3.5 3H2zm11-.5l-4-3 4-3v6z\"></path>\n              </svg>\n              <span>{info.email}</span>\n            </div>\n          }\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default UserInfo;","import React from 'react';\nimport './PaginatedUserList.css';\nimport ReactPaginate from 'react-paginate';\nimport Avatar from './Avatar';\nimport UserInfo from './UserInfo';\n\nconst PaginatedUserList = ({ total, users, currentPage, pageCount, goToPage }) => {\n  return (\n    <>\n      <h3>Found {total} {total > 1 ? 'Users' : 'User'}</h3>\n      <div className=\"list-wrapper\">\n        <ul className=\"user-list\">\n          {\n            users.map(user => (\n              <li\n                key={user.id}\n                className=\"user-list-item\"\n              >\n                <Avatar\n                  url={user.avatar_url + '&size=50'}\n                  link={user.html_url}\n                  altText={user.login}\n                  title={user.login}\n                />\n                <UserInfo\n                  user={user}\n                />\n              </li>\n            ))\n          }\n        </ul>\n        {\n          total > users.length &&\n          <ReactPaginate\n            activeClassName=\"current\"\n            activeLinkClassName=\"focused\"\n            containerClassName=\"paginated-nav\"\n            pageCount={pageCount}\n            pageRangeDisplayed={5}\n            onPageChange={goToPage}\n          />\n        }\n      </div>\n    </>\n  )\n};\n\nexport default PaginatedUserList;","import React, { createContext, useReducer } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport SearchBar from './components/SearchBar';\nimport PaginatedUserList from './components/PaginatedUserList';\n\n// Action types to be passed to our reducer\nexport const Actions = {\n  SetIsLoading: 0,\n  SetResults: 1,\n  FailedUserFetch: 2,\n  SetPage: 3,\n  RateLimitExceeded: 4\n};\n\nconst reducer = (state, { type, payload }) => {\n  switch (type) {\n    case Actions.SetIsLoading:\n      return { ...state, isLoading: payload };\n    case Actions.FailedUserFetch:\n      return { ...state, error: true, isLoading: false, failedToLoadMsg: payload };\n    case Actions.SetResults:\n      return {\n        ...state,\n        isLoading: false,\n        users: payload.items,\n        total: payload.total_count,\n        pageCount: payload.pageCount,\n        currentPage: payload.currentPage\n      };\n    case Actions.RateLimitExceeded:\n      return { ...state, rateLimitExceeded: true };\n    default:\n      return state;\n  }\n};\n\n/**\n * Create a context so we can pass our `dispatch` function and our\n * `rateLimitExceeded` flag down to children without\n * having to pass it multiple levels through props\n */\nexport const AppContext = createContext(null);\n\n// Main component\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, {});\n  const { users, isLoading, total, currentPage, pageCount, failedToLoadMsg, rateLimitExceeded } = state;\n\n  const onSearch = async (text) => {\n    dispatch({ type: Actions.SetIsLoading, payload: true });\n    try {\n      let res = await axios.get(`https://api.github.com/search/users?q=${text.replace(/\\s/g, '+')}`);\n      if (res && res.data) {\n        let { total_count, items } = res.data;\n        let pageCount = 1;\n        let currentPage = 1;\n        if (total_count > items.length) {\n          pageCount = Math.ceil(total_count / items.length);\n        }\n        dispatch({\n          type: Actions.SetResults,\n          payload: {\n            pageCount,\n            currentPage,\n            total_count,\n            items\n          }\n        });\n      }\n    }\n    catch (e) {\n      dispatch({ type: Actions.FailedUserFetch, payload: e.message });\n    }\n  };\n\n  const goToPage = (payload) => dispatch({ type: Actions.SetPage, payload });\n\n  return (\n    <AppContext.Provider value={{ dispatch, rateLimitExceeded }}>\n      <div className=\"App\">\n        <SearchBar\n          onSearch={onSearch}\n          loading={isLoading}\n        />\n        <div className=\"search-results\">\n          {total === 0 && <h3>Sorry! No users found :(</h3>}\n          {\n            !!total &&\n            <PaginatedUserList\n              total={total}\n              users={users}\n              currentPage={currentPage}\n              pageCount={pageCount}\n              goToPage={goToPage}\n            />\n          }\n          {\n            failedToLoadMsg &&\n            <h3 className=\"error-msg\">{failedToLoadMsg}</h3>\n          }\n          {\n            rateLimitExceeded &&\n            <h3 className=\"error-msg\">\n              API Rate limit has been exceeded. Only usernames and avatars will be shown for now.\n            </h3>\n          }\n        </div>\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}