{"version":3,"sources":["api.js","components/SearchBar.js","components/Avatar.js","components/UserInfo.js","components/PaginatedUserList.js","App.js","serviceWorker.js","index.js"],"names":["MAX_PAGES","Math","ceil","getUsers","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","searchText","currentPage","url","res","_res$data","total_count","items","pageCount","wrap","_context","prev","next","concat","axios","get","sent","data","abrupt","stop","_x","_x2","apply","this","arguments","SearchBar","onSearch","loading","inputRef","useRef","react_default","createElement","className","onSubmit","e","preventDefault","val","current","value","type","aria-label","autoCapitalize","autoComplete","autoCorrect","autoFocus","disabled","placeholder","ref","Avatar","link","altText","_useState","useState","_useState2","slicedToArray","setDidLoad","_useState3","_useState4","setLoadFailed","href","target","src","alt","width","onLoad","onError","UserInfo","user","info","_useContext","useContext","AppContext","rateLimitExceeded","dispatch","title","login","html_url","Fragment","name","location","viewBox","version","height","aria-hidden","fillRule","d","bio","email","PaginatedUserList","users","map","key","id","src_components_Avatar","avatar_url","src_components_UserInfo","Actions","reducer","state","payload","objectSpread","isLoading","error","failedToLoadMsg","total","createContext","App","_useReducer","useReducer","_useReducer2","exceededUsersLimit","goToPage","_ref2","page","t0","_ref3","_callee2","text","_context2","replace","Provider","src_components_SearchBar","undefined","startNum","length","getResultHeadline","src_components_PaginatedUserList","dist_default","activeClassName","activeLinkClassName","containerClassName","pageRangeDisplayed","onPageChange","_ref4","selected","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36deb785.chunk.js","sourcesContent":["import axios from 'axios';\n\n// These are public GitHub API restrictions\nexport const USERS_API_LIMIT = 1000;\nexport const PER_PAGE = 30;\nconst MAX_PAGES = Math.ceil(USERS_API_LIMIT / PER_PAGE);\n\nexport const getUsers = async (searchText, currentPage) => {\n  let url = `https://api.github.com/search/users?q=${searchText}`;\n  if (currentPage && currentPage > 1) {\n    url += `&page=${currentPage}`;\n  }\n  let res = await axios.get(url);\n  if (res && res.data) {\n    let { total_count, items } = res.data;\n    let pageCount = 1;\n    if (total_count > PER_PAGE) {\n      pageCount = total_count > USERS_API_LIMIT ? MAX_PAGES : Math.ceil(total_count / PER_PAGE);\n    }\n    return {\n      pageCount,\n      currentPage,\n      total_count,\n      items\n    };\n  }\n  else {\n    return null;\n  }\n};","import React, { useRef } from 'react';\nimport './SearchBar.css';\n\nconst SearchBar = ({ onSearch, loading }) => {\n  const inputRef = useRef(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let val = inputRef.current.value;\n    if (val) {\n      onSearch(val);\n    }\n  };\n\n  return (\n    <form\n      className=\"search-wrapper\"\n      onSubmit={onSubmit}>\n      <input\n        type=\"search\"\n        aria-label=\"Search Github Users\"\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoFocus\n        className=\"user-search\"\n        disabled={loading}\n        placeholder=\"Search Github Users\"\n        ref={inputRef} />\n      <button className=\"btn search-btn\"\n        disabled={loading}\n        type=\"submit\">\n        Search\n      </button>\n    </form>\n  )\n};\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport './Avatar.css';\n\nconst Avatar = ({ url, link, altText }) => {\n\n  const [didLoad, setDidLoad] = useState(false);\n  const [loadFailed, setLoadFailed] = useState(false);\n\n  return (\n    <a\n      className=\"avatar-wrapper\"\n      href={link}\n      target=\"_blank\">\n      <img\n        className=\"avatar\"\n        src={url}\n        alt={altText}\n        width={50}\n        onLoad={() => setDidLoad(true)}\n        onError={() => setLoadFailed(true)}\n      />\n    </a>\n  )\n};\n\nexport default Avatar;","import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './UserInfo.css';\nimport { Actions, AppContext } from '../App';\n\nconst UserInfo = ({ user }) => {\n  const [info, setInfo] = useState(null);\n  const { dispatch, rateLimitExceeded } = useContext(AppContext);\n\n  /**\n   * Get the detailed information from the API about this user\n   * Note, because this is a demo app and we aren't using any authentication,\n   * after a few page reloads, we'll start getting 403's because we exceed the rate limit.\n   * When that happens, we'll stop bothering with making those requests, and\n   * fall back to only showing avatars and usernames\n   */\n  // useEffect(() => {\n  //   if (user && !rateLimitExceeded) {\n  //     axios.get(user.url)\n  //       .then(res => setInfo(res.data))\n  //       .catch(e => {\n  //         if (e.response.status === 403) {\n  //           // Let's check the headers to see if we've exceeded the rate limit\n  //           const { headers } = e.response;\n  //           const remaining = parseInt(headers['x-ratelimit-remaining']);\n  //           if (remaining === 0) {\n  //             // Yup! We exceeded the limit\n  //             if (headers['x-ratelimit-reset']) {\n  //               const resetTime = parseInt(headers['x-ratelimit-reset']) * 1000;\n  //               const countdown = resetTime - Date.now();\n  //               console.debug(\n  //                 `%c[RATE_LIMIT] Oops, made too many API calls. We'll have to wait another ${(countdown / 60000).toFixed(1)} minutes before trying again`,\n  //                 'color: magenta;'\n  //               );\n  //               dispatch({ type: Actions.RateLimitExceeded, payload: true });\n  //             }\n  //           }\n  //         }\n  //       });\n  //   }\n  // }, [user, rateLimitExceeded, dispatch]);\n\n  return (\n    <div className={`user-info ${rateLimitExceeded ? 'show-less' : ''}`}>\n      <div className=\"flex\">\n        <h4 className=\"username\" title={user.login}>\n          <a className=\"user-link\" href={user.html_url} target=\"_blank\">{user.login}</a>\n        </h4>\n        {\n          info &&\n          <>\n            <h5 className=\"user-desc\" title={info.name}>{info.name}</h5>\n          </>\n        }\n      </div>\n      {\n        info &&\n        <div className=\"flex\">\n          {\n            info.location &&\n            <div className=\"flex user-location\">\n              {/* SVG Taken from GitHub's markup */}\n              <svg className=\"octicon octicon-location\" viewBox=\"0 0 12 16\" version=\"1.1\"\n                width=\"12\" height=\"16\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\"\n                  d=\"M6 0C2.69 0 0 2.5 0 5.5 0 10.02 6 16 6 16s6-5.98 6-10.5C12 2.5 9.31\n                    0 6 0zm0 14.55C4.14 12.52 1 8.44 1 5.5 1 3.02 3.25 1 6 1c1.34 0 2.61.48\n                    3.56 1.36.92.86 1.44 1.97 1.44 3.14 0 2.94-3.14 7.02-5 9.05zM8 5.5c0\n                    1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z\"\n                ></path>\n              </svg>\n              <span>{info.location}</span>\n            </div>\n          }\n          {\n            info.bio &&\n            <div className=\"flex\">\n              <span>{info.bio}</span>\n            </div>\n          }\n          {\n            info.email &&\n            <div className=\"flex\">\n              {/* SVG Taken from GitHub's markup */}\n              <svg className=\"octicon octicon-mail\" viewBox=\"0 0 14 16\" version=\"1.1\" width=\"14\"\n                height=\"16\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\" d=\"M0 4v8c0 .55.45 1 1 1h12c.55 0\n                  1-.45 1-1V4c0-.55-.45-1-1-1H1c-.55 0-1 .45-1 1zm13 0L7 9 1 4h12zM1 5.5l4\n                  3-4 3v-6zM2 12l3.5-3L7 10.5 8.5 9l3.5 3H2zm11-.5l-4-3 4-3v6z\"></path>\n              </svg>\n              <span>{info.email}</span>\n            </div>\n          }\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default UserInfo;","import React from 'react';\nimport './PaginatedUserList.css';\nimport Avatar from './Avatar';\nimport UserInfo from './UserInfo';\n\nconst PaginatedUserList = ({ users }) => {\n  return (\n    <div className=\"list-wrapper\">\n      <ul className=\"user-list\">\n        {\n          users.map(user => (\n            <li\n              key={user.id}\n              className=\"user-list-item\"\n            >\n              <Avatar\n                url={user.avatar_url + '&size=50'}\n                link={user.html_url}\n                altText={user.login}\n                title={user.login}\n              />\n              <UserInfo\n                user={user}\n              />\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  )\n};\n\nexport default PaginatedUserList;","import React, { createContext, useReducer, useRef } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport './App.css';\nimport { getUsers, USERS_API_LIMIT, PER_PAGE }from './api';\nimport SearchBar from './components/SearchBar';\nimport PaginatedUserList from './components/PaginatedUserList';\n\n// Action types to be passed to our reducer\nexport const Actions = {\n  SetIsLoading: 0,\n  SetResults: 1,\n  FailedUserFetch: 2,\n  SetPage: 3,\n  RateLimitExceeded: 4\n};\n\nconst reducer = (state, { type, payload }) => {\n  switch (type) {\n    case Actions.SetIsLoading:\n      return { ...state, isLoading: payload };\n    case Actions.FailedUserFetch:\n      return { ...state, error: true, isLoading: false, failedToLoadMsg: payload };\n    case Actions.SetResults:\n      return {\n        ...state,\n        isLoading: false,\n        users: payload.items,\n        total: payload.total_count,\n        pageCount: payload.pageCount,\n        currentPage: payload.currentPage\n      };\n    case Actions.RateLimitExceeded:\n      return { ...state, rateLimitExceeded: true };\n    default:\n      return state;\n  }\n};\n\n/**\n * Create a context so we can pass our `dispatch` function and our\n * `rateLimitExceeded` flag down to children without\n * having to pass it multiple levels through props\n */\nexport const AppContext = createContext(null);\n\n// Main component\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, {});\n  const { users, isLoading, total, currentPage, pageCount, failedToLoadMsg, rateLimitExceeded } = state;\n  const searchText = useRef('');\n  const exceededUsersLimit = total > USERS_API_LIMIT;\n\n  const goToPage = async (page) => {\n    dispatch({ type: Actions.SetIsLoading, payload: true });\n    try {\n      let payload = await getUsers(searchText.current, page);\n      dispatch({ type: Actions.SetResults, payload });\n    }\n    catch (e) {\n      dispatch({ type: Actions.FailedUserFetch, payload: e });\n    }\n  };\n\n  const onSearch = async (text) => {\n    // Save the search text so that we can send another request with it if we change pages later\n    searchText.current = text.replace(/\\s/g, '+');\n    goToPage(1);\n  };\n\n  const getResultHeadline = () => {\n    if (total === 1) {\n      return 'Found 1 User';\n    }\n\n    if (total <= PER_PAGE) {\n      return `Found ${total} Users`;\n    }\n\n    if (currentPage === 1) {\n      return `Showing First ${PER_PAGE} of ${exceededUsersLimit ? '1000+' : total} Found Users`;\n    }\n\n    if (!exceededUsersLimit && currentPage === pageCount) {\n      let startNum = total - users.length + 1;\n      return `Showing Users ${startNum} - ${total} of ${total} Found Users`;\n    }\n\n    return `Showing Users ${((currentPage - 1) * PER_PAGE) + 1} - ${currentPage * PER_PAGE} of ${exceededUsersLimit ? '1000+' : total} Found Users`;\n  };\n\n  return (\n    <AppContext.Provider value={{ dispatch, rateLimitExceeded }}>\n      <div className=\"App\">\n        <div className=\"fixed-top-row\">\n          <SearchBar\n            onSearch={onSearch}\n            loading={isLoading}\n          />\n          {\n            total !== undefined &&\n            <h3>{ total === 0 ? 'Sorry! No users found :(' : getResultHeadline() }</h3>\n          }\n        </div>\n        {\n          !!total &&\n          <PaginatedUserList\n            total={total > USERS_API_LIMIT ? USERS_API_LIMIT : total}\n            exceededUsersLimit={total > USERS_API_LIMIT}\n            users={users}\n            currentPage={currentPage}\n            pageCount={pageCount}\n            goToPage={goToPage}\n          />\n        }\n        {\n          failedToLoadMsg &&\n          <h3 className=\"error-msg\">{failedToLoadMsg}</h3>\n        }\n        {\n          rateLimitExceeded &&\n          <h3 className=\"error-msg\">\n            API Rate limit has been exceeded. Only usernames and avatars will be shown for now.\n          </h3>\n        }\n        {\n          total > PER_PAGE &&\n          <ReactPaginate\n            activeClassName=\"current\"\n            activeLinkClassName=\"focused\"\n            containerClassName=\"paginated-nav\"\n            pageCount={pageCount}\n            pageRangeDisplayed={5}\n            onPageChange={({ selected }) => goToPage(selected + 1)}\n          />\n        }\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}