{"version":3,"sources":["SearchBar.js","Avatar.js","UserInfo.js","PaginatedUserList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_ref","onSearch","loading","inputRef","useRef","react_default","a","createElement","className","onSubmit","e","preventDefault","val","current","value","type","aria-label","autoCapitalize","autoComplete","autoCorrect","autoFocus","disabled","placeholder","ref","Avatar","url","altText","_useState","useState","_useState2","Object","slicedToArray","setDidLoad","_useState3","_useState4","setLoadFailed","src","alt","width","onLoad","onError","UserInfo","user","info","setInfo","loadFailedMsg","setLoadFailedMsg","useEffect","axios","get","then","res","data","catch","console","error","title","login","Fragment","name","location","viewBox","version","height","aria-hidden","fillRule","d","bio","email","PaginatedUserList","total","users","page","pageCount","map","key","id","src_Avatar","avatar_url","src_UserInfo","Actions","reducer","state","payload","objectSpread","isLoading","items","total_count","App","_useReducer","useReducer","_useReducer2","dispatch","_ref2","asyncToGenerator","regenerator_default","mark","_callee","text","wrap","_context","prev","next","concat","replace","sent","t0","stop","_x","apply","this","arguments","src_SearchBar","src_PaginatedUserList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67cb8925.chunk.js","sourcesContent":["import React, { useRef } from 'react';\n\nconst SearchBar = ({ onSearch, loading }) => {\n  const inputRef = useRef(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let val = inputRef.current.value;\n    if (val) {\n      onSearch(val);\n    }\n  };\n\n  return (\n    <form\n      className=\"search-wrapper\"\n      onSubmit={onSubmit}>\n      <input\n        type=\"search\"\n        aria-label=\"Search Github Users\"\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoFocus\n        className=\"user-search\"\n        disabled={loading}\n        placeholder=\"Search Github Users\"\n        ref={inputRef} />\n      <button className=\"btn search-btn\"\n        disabled={loading}\n        type=\"submit\">\n        Search\n      </button>\n    </form>\n  )\n};\n\nexport default SearchBar;","import React, { useState } from 'react';\n\nconst Avatar = ({ url, altText }) => {\n\n  const [didLoad, setDidLoad] = useState(false);\n  const [loadFailed, setLoadFailed] = useState(false);\n\n  return (\n    <img\n      className=\"avatar\"\n      src={url}\n      alt={altText}\n      width={50}\n      onLoad={() => setDidLoad(true)}\n      onError={() => setLoadFailed(true)}\n    />\n  )\n};\n\nexport default Avatar;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst UserInfo = ({ user }) => {\n\n  const [info, setInfo] = useState(null);\n  const [loadFailedMsg, setLoadFailedMsg] = useState(null);\n\n  useEffect(() => {\n    if (user) {\n      axios.get(user.url)\n        .then(res => setInfo(res.data))\n        .catch(e => {\n          console.error(e);\n          setLoadFailedMsg(e);\n        });\n    }\n  }, [user]);\n\n  return (\n    <div className=\"user-info\">\n      <div className=\"flex\">\n        <h4 title={user.login}>{user.login}</h4>\n        {\n          info &&\n          <>\n            <h5 title={info.name}>{info.name}</h5>\n          </>\n        }\n        {\n          loadFailedMsg &&\n          <p className=\"error-msg\">{loadFailedMsg}</p>\n        }\n      </div>\n      {\n        info &&\n        <div className=\"flex\">\n          {\n            info.location &&\n            <div className=\"flex\">\n              {/* SVG Taken from GitHub's markup */}\n              <svg className=\"octicon octicon-location\" viewBox=\"0 0 12 16\" version=\"1.1\"\n                width=\"12\" height=\"16\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\"\n                  d=\"M6 0C2.69 0 0 2.5 0 5.5 0 10.02 6 16 6 16s6-5.98 6-10.5C12 2.5 9.31\n                    0 6 0zm0 14.55C4.14 12.52 1 8.44 1 5.5 1 3.02 3.25 1 6 1c1.34 0 2.61.48\n                    3.56 1.36.92.86 1.44 1.97 1.44 3.14 0 2.94-3.14 7.02-5 9.05zM8 5.5c0\n                    1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z\"\n                ></path>\n              </svg>\n              <span>{info.location}</span>\n            </div>\n          }\n          {\n            info.bio &&\n            <div className=\"flex\">\n              <span>{info.bio}</span>\n            </div>\n          }\n          {\n            info.email &&\n            <div className=\"flex\">\n              {/* SVG Taken from GitHub's markup */}\n              <svg className=\"octicon octicon-mail\" viewBox=\"0 0 14 16\" version=\"1.1\" width=\"14\"\n                height=\"16\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\" d=\"M0 4v8c0 .55.45 1 1 1h12c.55 0\n                  1-.45 1-1V4c0-.55-.45-1-1-1H1c-.55 0-1 .45-1 1zm13 0L7 9 1 4h12zM1 5.5l4\n                  3-4 3v-6zM2 12l3.5-3L7 10.5 8.5 9l3.5 3H2zm11-.5l-4-3 4-3v6z\"></path>\n              </svg>\n              <span>{info.email}</span>\n            </div>\n          }\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default UserInfo;","import React, { useReducer } from 'react';\nimport Avatar from './Avatar';\nimport UserInfo from './UserInfo';\n\nconst PaginatedUserList = ({ total, users, page, pageCount }) => {\n  return (\n    <>\n      <h3>Found {total} {total > 1 ? 'Users' : 'User'}</h3>\n      <div className=\"list-wrapper\">\n        <ul className=\"user-list\">\n          {\n            users.map(user => (\n              <li\n                key={user.id}\n                className=\"user-list-item\"\n              >\n                <Avatar\n                  url={user.avatar_url + '&size=50'}\n                  altText={user.login}\n                  title={user.login}\n                />\n                <UserInfo\n                  user={user}\n                />\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </>\n  )\n};\n\nexport default PaginatedUserList;","import React, { useReducer } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport PaginatedUserList from './PaginatedUserList';\n\nconst Actions = {\n  SetIsLoading: 0,\n  SetResults: 1,\n  FailedUserFetch: 2,\n};\n\nconst reducer = (state, { type, payload }) => {\n  switch (type) {\n    case Actions.SetIsLoading:\n      return { ...state, isLoading: payload };\n    case Actions.FailedUserFetch:\n      return { ...state, error: true, isLoading: false };\n    case Actions.SetResults:\n      return { ...state, isLoading: false, users: payload.items, total: payload.total_count };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, {});\n  const { users, isLoading, total } = state;\n\n  const onSearch = async (text) => {\n    dispatch({ type: Actions.SetIsLoading, payload: true });\n    try {\n      let res = await axios.get(`https://api.github.com/search/users?q=${text.replace(/\\s/g, '+')}`);\n      if (res && res.data) {\n        dispatch({ type: Actions.SetResults, payload: res.data });\n      }\n    }\n    catch (e) {\n      dispatch({ type: Actions.FailedUserFetch });\n      console.error(e);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBar\n        onSearch={onSearch}\n        loading={isLoading}\n      />\n      <div className=\"search-results\">\n        { total === 0 && <h3>Sorry! No users found :(</h3> }\n        {\n          !!total &&\n          <PaginatedUserList\n            total={total}\n            users={users}\n          />\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}